PEA               = empleo + desocup,
tasa_desocup = desocup/PEA,
empleo_publico = sum(PONDERA[ESTADO == 1 & PP04A==1], na.rm = TRUE),
empleo_privado = sum(PONDERA[ESTADO == 1 & PP04A==2], na.rm = TRUE),
tasa_publico = empleo_publico/empleo*100,
tasa_privado = empleo_privado/empleo,
tasa_ocup = empleo/pop*100) %>%
ggplot() +
eom_line(aes(ANO4, tasa_publico, color = "Public"), stat = "identity") +
geom_line(aes(ANO4, tasa_ocup, color = "Total"), stat = "identity") +
scale_x_continuous(breaks = c(2007, 2009, 2011, 2013, 2015, 2017, 2019)) +
theme_bw() +
labs(title = "Total and public employment of Tierra del Fuego", y = "%", x = "", caption = "Source: National Household Survey", color = "") +
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.5))+
scale_x_continuous(breaks = 2007:2020)
Ocupados          = sum(PONDERA[ESTADO == 1]),
Desocupados       = sum(PONDERA[ESTADO == 2]),
PEA               = Ocupados + Desocupados,
pool_tdf %>%
group_by(ANO4) %>%
summarise(pop = sum(PONDERA),
empleo = sum(PONDERA[ESTADO == 1], na.rm = TRUE),
desocup = sum(PONDERA[ESTADO == 2]),
PEA               = empleo + desocup,
tasa_desocup = desocup/PEA,
empleo_publico = sum(PONDERA[ESTADO == 1 & PP04A==1], na.rm = TRUE),
empleo_privado = sum(PONDERA[ESTADO == 1 & PP04A==2], na.rm = TRUE),
tasa_publico = empleo_publico/empleo*100,
tasa_privado = empleo_privado/empleo,
tasa_ocup = empleo/pop*100) %>%
ggplot() +
eom_line(aes(ANO4, tasa_publico, color = "Public"), stat = "identity") +
geom_line(aes(ANO4, tasa_ocup, color = "Total"), stat = "identity") +
scale_x_continuous(breaks = c(2007, 2009, 2011, 2013, 2015, 2017, 2019)) +
theme_bw() +
labs(title = "Total and public employment of Tierra del Fuego", y = "%", x = "", caption = "Source: National Household Survey", color = "") +
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.5))+
scale_x_continuous(breaks = 2007:2020)
Ocupados          = sum(PONDERA[ESTADO == 1]),
Desocupados       = sum(PONDERA[ESTADO == 2]),
PEA               = Ocupados + Desocupados,
pool_tdf %>%
group_by(ANO4) %>%
summarise(pop = sum(PONDERA),
empleo = sum(PONDERA[ESTADO == 1], na.rm = TRUE),
desocup = sum(PONDERA[ESTADO == 2]),
PEA               = empleo + desocup,
tasa_desocup = desocup/PEA,
empleo_publico = sum(PONDERA[ESTADO == 1 & PP04A==1], na.rm = TRUE),
empleo_privado = sum(PONDERA[ESTADO == 1 & PP04A==2], na.rm = TRUE),
tasa_publico = empleo_publico/empleo*100,
tasa_privado = empleo_privado/empleo,
tasa_ocup = empleo/pop*100) %>%
ggplot() +
geom_line(aes(ANO4, tasa_publico, color = "Public"), stat = "identity") +
geom_line(aes(ANO4, tasa_ocup, color = "Total"), stat = "identity") +
scale_x_continuous(breaks = c(2007, 2009, 2011, 2013, 2015, 2017, 2019)) +
theme_bw() +
labs(title = "Total and public employment of Tierra del Fuego", y = "%", x = "", caption = "Source: National Household Survey", color = "") +
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.5))+
scale_x_continuous(breaks = 2007:2020)
pool_tdf %>%
group_by(ANO4) %>%
summarise(pop = sum(PONDERA)) %>%
ggplot() +
geom_line(aes(ANO4, pop), color = "darkblue",stat = "identity") +
scale_x_continuous(breaks = c(2007, 2009, 2011, 2013, 2015, 2017, 2019)) +
theme_bw() +
labs(title = "Population of Tierra del Fuego", y = "%", x = "", caption = "Source: National Household Survey", color = "") +
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.5))+
scale_x_continuous(breaks = 2007:2020)
?lag()
lag(pool_tdf$ANO4)
#----------------------------------------------------
## hacer la pop growth rate, no el coso puro
pool_tdf %>%
group_by(ANO4) %>%
summarise(prev_year = ifelse(ANO4 == lag(ANO4), sum(PONDERA), NA),
pop = sum(PONDERA), rate_pop = (pop-prev_year)*100/prev_year) %>%
ggplot() +
geom_line(aes(rate_pop), color = "darkblue",stat = "identity") +
scale_x_continuous(breaks = c(2007, 2009, 2011, 2013, 2015, 2017, 2019)) +
theme_bw() +
labs(title = "Population of Tierra del Fuego", y = "%", x = "", caption = "Source: National Household Survey", color = "") +
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.5))+
scale_x_continuous(breaks = 2007:2020)
#----------------------------------------------------
## hacer la pop growth rate, no el coso puro
pool_tdf %>%
group_by(ANO4) %>%
summarise(prev_year = ifelse(ANO4 == lag(ANO4), sum(PONDERA), NA),
pop = sum(PONDERA), rate_pop = (pop-prev_year)*100/prev_year) %>%
ggplot() +
geom_line(aes(ANO4, rate_pop), color = "darkblue",stat = "identity") +
scale_x_continuous(breaks = c(2007, 2009, 2011, 2013, 2015, 2017, 2019)) +
theme_bw() +
labs(title = "Population of Tierra del Fuego", y = "%", x = "", caption = "Source: National Household Survey", color = "") +
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.5))+
scale_x_continuous(breaks = 2007:2020)
#----------------------------------------------------
## hacer la pop growth rate, no el coso puro
pool_tdf %>%
group_by(ANO4) %>%
summarise(prev_year = ifelse(ANO4 == lag(ANO4), sum(PONDERA), NA),
pop = sum(PONDERA), rate_pop = (pop-prev_year)*100/prev_year) #%>%
#----------------------------------------------------
## hacer la pop growth rate, no el coso puro
pool_tdf %>%
group_by(ANO4) %>%
summarise(prev_year = ifelse(ANO4 == lag(ANO4), sum(PONDERA), NA),
pop = sum(PONDERA, na.rm = TRUE), rate_pop = (pop-prev_year)*100/prev_year) #%>%
#----------------------------------------------------
## hacer la pop growth rate, no el coso puro
pool_tdf %>%
group_by(ANO4) %>%
arrange(ANO4) %>%
summarise(prev_year = ifelse(ANO4 == lag(ANO4), sum(PONDERA), NA),
pop = sum(PONDERA, na.rm = TRUE), rate_pop = (pop-prev_year)*100/prev_year) #%>%
#----------------------------------------------------
## hacer la pop growth rate, no el coso puro
pool_tdf %>%
group_by(ANO4) %>%
arrange(desc(ANO4)) %>%
summarise(prev_year = ifelse(ANO4 == lag(ANO4), sum(PONDERA), NA),
pop = sum(PONDERA, na.rm = TRUE), rate_pop = (pop-prev_year)*100/prev_year) #%>%
#----------------------------------------------------
## hacer la pop growth rate, no el coso puro
pool_tdf %>%
group_by(ANO4) %>%
arrange(desc(ANO4)) #%>%
library(tidyverse)
library(gganimate)
library(gapminder)
library(gifski)
theme_set(theme_classic())
gap <- gapminder %>%
filter(continent == "Asia") %>%
group_by(year) %>%
# The * 1 makes it possible to have non-integer ranks while sliding
mutate(rank = min_rank(-gdpPercap) * 1) %>%
ungroup()
p <- ggplot(gap, aes(rank, group = country,
fill = as.factor(country), color = as.factor(country))) +
geom_tile(aes(y = gdpPercap/2,
height = gdpPercap,
width = 0.9), alpha = 0.8, color = NA) +
# text in x-axis (requires clip = "off" in coord_*)
# paste(country, " ")  is a hack to make pretty spacing, since hjust > 1
#   leads to weird artifacts in text spacing.
geom_text(aes(y = 0, label = paste(country, " ")), vjust = 0.2, hjust = 1) +
coord_flip(clip = "off", expand = FALSE) +
scale_y_continuous(labels = scales::comma) +
scale_x_reverse() +
guides(color = FALSE, fill = FALSE) +
labs(title='{closest_state}', x = "", y = "GFP per capita") +
theme(plot.title = element_text(hjust = 0, size = 22),
axis.ticks.y = element_blank(),  # These relate to the axes post-flip
axis.text.y  = element_blank(),  # These relate to the axes post-flip
plot.margin = margin(1,1,1,4, "cm")) +
transition_states(year, transition_length = 4, state_length = 1) +
ease_aes('cubic-in-out')
animate(p, duration = 5, fps = 20, width = 500, height = 500, renderer = gifski_renderer())
ggplot(
gapminder,
aes(x = gdpPercap, y=lifeExp, size = pop, colour = country)
) +
geom_point(show.legend = FALSE, alpha = 0.7) +
scale_color_viridis_d() +
scale_size(range = c(2, 12)) +
scale_x_log10() +
labs(x = "GDP per capita", y = "Life expectancy") + transition_time(year) +
labs(title = "Year: {frame_time}")
ggplot(
gapminder,
aes(x = gdpPercap, y=lifeExp, size = pop, colour = country)
) +
geom_point(show.legend = FALSE, alpha = 0.7) +
scale_color_viridis_d() +
scale_size(range = c(2, 12)) +
scale_x_log10() +
labs(x = "GDP per capita", y = "Life expectancy") + transition_time(year) +
labs(title = "Year: {frame_time}")
theme_set(theme_classic())
gap <- gapminder %>%
filter(continent == "Asia") %>%
group_by(year) %>%
# The * 1 makes it possible to have non-integer ranks while sliding
mutate(rank = min_rank(-gdpPercap) * 1) %>%
ungroup()
library(tidyverse)
library(gganimate)
library(gapminder)
library(gifski)
theme_set(theme_classic())
gap <- gapminder %>%
filter(continent == "Asia") %>%
group_by(year) %>%
# The * 1 makes it possible to have non-integer ranks while sliding
mutate(rank = min_rank(-gdpPercap) * 1) %>%
ungroup()
p <- ggplot(gap, aes(rank, group = country,
fill = as.factor(country), color = as.factor(country))) +
geom_tile(aes(y = gdpPercap/2,
height = gdpPercap,
width = 0.9), alpha = 0.8, color = NA) +
# text in x-axis (requires clip = "off" in coord_*)
# paste(country, " ")  is a hack to make pretty spacing, since hjust > 1
#   leads to weird artifacts in text spacing.
geom_text(aes(y = 0, label = paste(country, " ")), vjust = 0.2, hjust = 1) +
coord_flip(clip = "off", expand = FALSE) +
scale_y_continuous(labels = scales::comma) +
scale_x_reverse() +
guides(color = FALSE, fill = FALSE) +
labs(title='{closest_state}', x = "", y = "GFP per capita") +
theme(plot.title = element_text(hjust = 0, size = 22),
axis.ticks.y = element_blank(),  # These relate to the axes post-flip
axis.text.y  = element_blank(),  # These relate to the axes post-flip
plot.margin = margin(1,1,1,4, "cm")) +
transition_states(year, transition_length = 4, state_length = 1) +
ease_aes('cubic-in-out')
animate(p, duration = 5, fps = 20, width = 650, height = 500, renderer = gifski_renderer())
ggplot(
gapminder,
aes(x = gdpPercap, y=lifeExp, size = pop, colour = country)
) +
geom_point(show.legend = FALSE, alpha = 0.7) +
scale_color_viridis_d() +
scale_size(range = c(2, 12)) +
scale_x_log10() +
labs(x = "GDP per capita", y = "Life expectancy") + transition_time(year) +
labs(title = "Year: {frame_time}")
shiny::runApp('C:/Users/nico/Desktop/Harris/Winter 2021/Data Programming II/Fortunato-Frisbie-final-project')
install.packages("treemap")
library(treemap)
group <- c(rep("group-1",4),rep("group-2",2),rep("group-3",3))
subgroup <- paste("subgroup" , c(1,2,3,4,1,2,1,2,3), sep="-")
value <- c(13,5,22,12,11,7,3,1,23)
data <- data.frame(group,subgroup,value)
# treemap
treemap(data,
index=c("group","subgroup"),
vSize="value",
type="index"
)
View(data)
install.packages("d3treeR")
library(d3treeR)
library(devtools)
install_github("timelyportfolio/d3treeR")
finance <- read.csv("chinese_finance.csv")
library(tidyverse)
finance <- read.csv("chinese_finance.csv")
setwd("C:/Users/nico/Desktop/Harris/Winter 2021/Data Programming II/Fortunato-Frisbie-final-project")
finance <- read.csv("chinese_finance.csv")
View(finance)
library(countrycode)
finance$continent <- countrycode(sourcevar = finance$recipient_condensed,
origin = "country.name",
destination = "continent")
finance$continent <- countrycode(sourcevar = finance$recipient_condensed,
destination = "continent")
finance$continent <- countrycode(sourcevar = finance$recipient_condensed,
origin = "country.name",
destination = "continent")
finance$continent <- countrycode(sourcevar = finance$recipient_condensed,
origin = "country.name",
destination = "continent")
un_scores <- read.csv("joint_support_scores.csv") %>%
select(country, diff_support_score) %>%
left_join(comtrade_china_total, by = c("country" = "partner"))
comtrade <- rbind(read.csv("comtrade_2018.csv"), read.csv("comtrade_2013.csv"))
comtrade_china_total <- comtrade %>%
select(Year, Trade.Flow, Partner, Partner.ISO, Trade.Value..US..) %>%
rename(year = Year, trade_flow = Trade.Flow, partner = Partner, ISO = Partner.ISO, total_usd = Trade.Value..US..)
un_scores <- read.csv("joint_support_scores.csv") %>%
select(country, diff_support_score) %>%
left_join(comtrade_china_total, by = c("country" = "partner"))
un_scores$continent <- countrycode(sourcevar = un_scores$country,
origin = "country.name",
destination = "continent")
View(un_scores)
treemap(finance,
index=c("continent", "crs_sector_name"),
vSize="usd_defl_2014",
vColor="crs_sector_name",
title="",
title.legend = ""
)
glimpse(finance)
finance$usd_defl_2014 <- str_remove_all(finance$usd_defl_2014, ",")
finance$usd_defl_2014 <- as.integer(finance$usd_defl_2014)
finance <- read.csv("chinese_finance.csv")
finance$continent <- countrycode(sourcevar = finance$recipient_condensed,
origin = "country.name",
destination = "continent")
finance$usd_defl_2014 <- str_remove_all(finance$usd_defl_2014, ",")
finance$usd_defl_2014 <- as.integer(finance$usd_defl_2014)
treemap(finance,
index=c("continent", "crs_sector_name"),
vSize="usd_defl_2014",
vColor="crs_sector_name",
title="",
title.legend = ""
)
finance_tree <- finance %>%
group_by(continent, crs_sector_name) %>%
summarise(total = sum(usd_defl_2014, na.rm = TRUE))
View(finance_tree)
treemap(finance_tree,
index=c("continent", "crs_sector_name"),
vSize="usd_defl_2014",
vColor="total",
title="",
title.legend = ""
)
treemap(finance_tree,
index=c("continent", "crs_sector_name"),
vSize="total",
vColor="total",
title="",
title.legend = ""
)
treemap(finance_tree,
index=c("continent", "crs_sector_name"),
vSize="total",
vColor="continent",
title="",
title.legend = ""
)
tree <- treemap(finance_tree,
index=c("continent", "crs_sector_name"),
vSize="total",
vColor="continent",
title="",
title.legend = ""
)
d3tree(tree, rootname = "Total chinese investments (2000-2014)")
library(d3treeR)
install_github("timelyportfolio/d3treeR")
library(d3treeR)
d3tree(tree, rootname = "Total chinese investments (2000-2014)")
?d3tree
library(plotly)
plot_ly(finance_tree,
type="treemap",
labels="crs_sector_name",
parents="continent"
)
plot_ly(finance_tree,
type="treemap",
labels=crs_sector_name,
parents=continent
)
plot_ly(
type="treemap",
labels=finance_tree$crs_sector_name,
parents=finance_tree$continent
)
treemap(finance_tree,
index=c("continent", "crs_sector_name"),
vSize="total",
vColor="total",
type = "value",
title="",
title.legend = ""
)
?plot_ly
?plot_ly
tree <- treemap(finance_tree,
index=c("continent", "crs_sector_name"),
vSize="total",
vColor="total",
type = "value",
title="",
title.legend = ""
)
plot_ly(tree)
?plot_ly
treemap(finance_tree,
index=c("continent", "crs_sector_name"),
vSize="total",
vColor="total",
type = "value",
title="",
title.legend = ""
)
fig <- plot_ly(finance_tree, x = ~crs_sector_name, y = ~total,
type = 'bar',
name = 'total')
treemap(finance_tree,
index=c("crs_sector_name", "continent"),
vSize="total",
vColor="total",
type = "value",
title="",
title.legend = ""
)
Animals <- c("giraffes", "orangutans", "monkeys")
SF_Zoo <- c(20, 14, 23)
LA_Zoo <- c(12, 18, 29)
data <- data.frame(Animals, SF_Zoo, LA_Zoo)
View(data)
View(finance_tree)
View(data)
fig <- fig %>% add_trace(y = ~continent, name = "continent")
fig <- fig %>% layout(yaxis = list(title = "Count"), barmode = "stack")
fig
bar <- ggplot(finance_tree, aes(total, fct_reorder(crs_sector_name), fill = continent)) +
geom_bar(stat= "identity")
bar
bar <- ggplot(finance_tree) +
geom_bar(aes(total, fct_reorder(crs_sector_name, total), fill = continent), stat= "identity")
bar
finance_tree <- finance_tree %>%
na.omit()
bar <- ggplot(finance_tree) +
geom_bar(aes(total, fct_reorder(crs_sector_name, total), fill = continent), stat= "identity")
bar
finance_tree <- finance %>%
group_by(continent, crs_sector_name) %>%
summarise(total = sum(usd_defl_2014, na.rm = TRUE))
bar <- ggplot(finance_tree) +
geom_bar(aes(total, fct_reorder(crs_sector_name, total), fill = continent), stat= "identity")
bar
bar <- ggplot(finance_tree) +
geom_bar(aes(total, fct_reorder(crs_sector_name, total), fill = continent),
stat= "identity", position = "fill")
bar
finance_tree %>%
pivot_wider(names_from = crs_sector_name, values_from = total) #%>%
finance_tree %>%
pivot_wider(names_from = continent, values_from = total) %>%
group_by(crs_sector_name) %>%
summarise(total = sum('Africa':'Oceania'),
pct_af = Africa/total*100,
pct_am = Americas/total*100,
pct_asia = Asia/total*100,
pct_eur = Europe/total*100,
pct_oce = Oceania/total*100)
finance_tree %>%
pivot_wider(names_from = continent, values_from = total) %>%
group_by(crs_sector_name) %>%
summarise(total = sum('Africa':'Oceania'))
finance_tree %>%
pivot_wider(names_from = continent, values_from = total) #%>%
finance_tree %>%
pivot_wider(names_from = continent, values_from = total) %>%
group_by(crs_sector_name) %>%
summarise(total = sum('Africa':'NA'))
finance_tree %>%
pivot_wider(names_from = continent, values_from = total) %>%
group_by(crs_sector_name) %>%
summarise(total = sum('Africa':'NA', na.rm = TRUE))
bar <- ggplot(finance_tree) +
geom_bar(aes(total, fct_reorder(crs_sector_name, total), fill = continent),
stat= "identity", position = "fill")
bar
bar <- ggplot(finance_tree) +
geom_bar(aes(total, fct_reorder(crs_sector_name, total), fill = continent),
stat= "identity", position = "fill") +
labs(title = "Chinese development finance per type and continent", y = "", x = "Total", fill = "Continent") +
theme_minimal()
bar
fig <- ggplotly(bar)
fig
bar <- ggplot(finance_tree) +
geom_bar(aes(total, crs_sector_name, fill = continent),
stat= "identity", position = "fill") +
labs(title = "Chinese development finance per type and continent", y = "", x = "Total", fill = "Continent") +
theme_minimal()
fig <- ggplotly(bar)
fig
set.seed(123)
df <- diamonds[sample(1:nrow(diamonds), size = 1000),]
View(df)
View(df)
bar <- ggplot(finance_tree, aes(y = crs_sector_name)) +
geom_bar(aes(y = ..count../sum(..count..), fill = continent),
stat= "identity", position = "fill") +
labs(title = "Chinese development finance per type and continent", y = "", x = "Total", fill = "Continent") +
theme_minimal()
fig <- ggplotly(bar)
fig
bar <- ggplot(finance_tree) +
geom_bar(aes(total, crs_sector_name, fill = continent),
stat= "identity", position = "fill") +
labs(title = "Chinese development finance per type and continent", y = "", x = "Total", fill = "Continent") +
theme_minimal()
fig <- ggplotly(bar)
fig
?ggplotly
finance_tree <- finance %>%
group_by(continent, crs_sector_name) %>%
summarise(total = sum(usd_defl_2014, na.rm = TRUE)) %>%
rename(type = crs_sector_name)
finance_tree <- finance %>%
group_by(continent, crs_sector_name) %>%
summarise(total = sum(usd_defl_2014, na.rm = TRUE)) %>%
rename(type = crs_sector_name)
bar <- ggplot(finance_tree) +
geom_bar(aes(total, type, fill = continent),
stat= "identity", position = "fill") +
labs(title = "Chinese development finance per type and continent", y = "", x = "Total", fill = "Continent") +
theme_minimal()
fig <- ggplotly(bar)
fig
